{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_loopkup",
						"type": "DatasetReference"
					},
					"name": "DimCountrySource"
				},
				{
					"dataset": {
						"referenceName": "ds_dimdate_lookup",
						"type": "DatasetReference"
					},
					"name": "DimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_Admissions_Daily",
						"type": "DatasetReference"
					},
					"name": "DailySink"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_Admissions_Weekly",
						"type": "DatasetReference"
					},
					"name": "WeeklySink"
				}
			],
			"transformations": [
				{
					"name": "SelectReqFields"
				},
				{
					"name": "LookupCountry"
				},
				{
					"name": "SelectReqFields2"
				},
				{
					"name": "SplitDailyAndWeeklyData"
				},
				{
					"name": "AggWeekStartEndDate"
				},
				{
					"name": "JoinWithDate"
				},
				{
					"name": "PivotDailyData"
				},
				{
					"name": "PivotWeeklyData"
				},
				{
					"name": "SortWeekly"
				},
				{
					"name": "SortDaily"
				},
				{
					"name": "SelectWeeklySink"
				},
				{
					"name": "SelectDailySink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimCountrySource",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDateSource",
				"HospitalAdmissionsSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          value,",
				"          source,",
				"          each(match(name=='date'||name=='year_week'),",
				"               'reported_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqFields",
				"SelectReqFields, DimCountrySource lookup(SelectReqFields@country == DimCountrySource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountry",
				"LookupCountry select(mapColumn(",
				"          country = SelectReqFields@country,",
				"          indicator,",
				"          value,",
				"          source,",
				"          reported_date,",
				"          reported_year_week,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqFields2",
				"SelectReqFields2 split(indicator == 'Daily hospital occupancy' || indicator == 'Daily ICU occupancy',",
				"     disjoint: false) ~> SplitDailyAndWeeklyData@(Daily, Weekly)",
				"DimDateSource aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggWeekStartEndDate",
				"SplitDailyAndWeeklyData@Weekly, AggWeekStartEndDate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> JoinWithDate",
				"SplitDailyAndWeeklyData@Daily pivot(groupBy(country,",
				"          source,",
				"          reported_date,",
				"          population,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_year_week),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> PivotDailyData",
				"JoinWithDate pivot(groupBy(country,",
				"          source,",
				"          reported_date,",
				"          reported_year_week,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          ecdc_year_week,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> PivotWeeklyData",
				"PivotWeeklyData sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> SortWeekly",
				"PivotDailyData sort(desc(reported_date, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> SortDaily",
				"SortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          { new hospital_occupancy_count} = {count_Weekly new hospital admissions per 100k},",
				"          { new icu_occupancy_count} = {count_Weekly new ICU admissions per 100k},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWeeklySink",
				"SortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_count = {count_Daily hospital occupancy},",
				"          icu_occupancy_count = {count_Daily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDailySink",
				"SelectDailySink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['daily_hospital_admissions.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DailySink",
				"SelectWeeklySink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['weekly_hospital_admissions.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> WeeklySink"
			]
		}
	}
}